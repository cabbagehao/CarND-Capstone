#!/usr/bin/env python

import rospy
import math
import tf
import numpy as np
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import Header, Int32, Time
from geometry_msgs.msg import Point, Quaternion, PoseStamped
from styx_msgs.msg import Lane, Waypoint, TrafficLightState
from nav_msgs.msg import Path
from waypoint_locator.srv import *
import yaml

class Viz(object):
    def __init__(self):
        rospy.init_node('viz')
        
        # storage for all the waypoints
        self.all_ref_waypoints = []

        self.last_pose = None

        # storing current path
        self.last_path = None

        # last received final waypoints
        self.last_final_waypoints = None

        # get stop light position
        config_string = rospy.get_param("/traffic_light_config")
        self.config = yaml.load(config_string)
        self.stop_line_positions = self.config['stop_line_positions']

        # remember waypoints index behind and ahead of the last
        # current_pose, so for the next round we can save the time for
        # looking
        self.pose_ref_waypoints_idx = None

        # the last pose for detected red traffic
        self.pose_red_light_idx = None

        self.locate_waypoints_around = rospy.ServiceProxy('/waypoint_locator/locate_waypoints_around', LocateWaypointsAround)

        rospy.Subscriber('/current_pose', PoseStamped, self.pose_cb, queue_size=1)
        rospy.Subscriber('/base_waypoints', Lane, self.waypoints_cb, queue_size=1)
        rospy.Subscriber('/final_waypoints', Lane, self.final_waypoints_cb, queue_size=1, buff_size=100000)
        rospy.Subscriber('/traffic_waypoint', TrafficLightState, self.traffic_waypoint_cb, queue_size=1)
        
        rospy.Subscriber('/viz_time', Time, self.viz_time_seq_cb, queue_size=1)

        self.viz_current_pub = rospy.Publisher('viz_current_pose', PoseStamped, queue_size=1)
        self.viz_waypoints_around_pub = rospy.Publisher('viz_waypoints_around', Marker, queue_size=1)
        self.viz_current_path_pub = rospy.Publisher('viz_current_path', Path, queue_size=1)
        self.viz_red_light_pub = rospy.Publisher('viz_red_light_stop', Marker, queue_size=1)

        rospy.wait_for_service('/waypoint_locator/locate_waypoints_around')

        rospy.spin()

    def viz_time_seq_cb(self, msg):
        if len(self.all_ref_waypoints) > 0:
            self.publish_current()
            self.publish_waypoints_around()
            self.publish_current_path()
            self.publish_red_light()

    def publish_red_light(self):
        if self.pose_red_light_idx is None:
            return
        # waypoint for red light position
        pose = self.all_ref_waypoints[self.pose_red_light_idx].pose.pose

        viz_red_light = Marker()
        viz_red_light.header = Header()
        viz_red_light.header.stamp = rospy.Time.now()
        viz_red_light.header.frame_id = "/world"
        viz_red_light.id = 1
        viz_red_light.type = Marker.SPHERE
        viz_red_light.ns = "/viz_light"
        viz_red_light.action = Marker.ADD # or MODIFY. Both are 0

        viz_red_light.pose = pose
        
        viz_red_light.scale.x = 1.0
        viz_red_light.scale.y = 1.0
        viz_red_light.scale.z = 1.0
                
        viz_red_light.color.r = 1.0
        viz_red_light.color.g = 0.0
        viz_red_light.color.b = 0.0
        viz_red_light.color.a = 1.0

        self.viz_red_light_pub.publish(viz_red_light)

    def make_last_path(self):
        if self.last_final_waypoints is None:
            return
        
        path = Path()
        path.header = Header()
        path.header.stamp = rospy.Time.now()
        path.header.frame_id = "/world"
        path.poses = []
        waypoints = self.last_final_waypoints.waypoints
        # thresholding the number of final waypoints
        waypoints_thresh = 50
        counter = 0
        for wp in waypoints:
            position = wp.pose.pose.position
            orientation = wp.pose.pose.orientation
            path.poses.append(
                self.get_pose_stamped(position, orientation))
            counter += 1
            if counter > waypoints_thresh:
                break
        self.last_path = path

    def final_waypoints_cb(self, msg):
        self.last_final_waypoints = msg
        
    def pose_cb(self, msg):
        self.last_pose = msg

    def publish_current(self):
        if self.last_pose is None:
            return
        
        req = LocateWaypointsAroundRequest(self.last_pose.pose)
        resp = self.locate_waypoints_around(req)
        if resp.behind >= 0 and resp.ahead >= 0:
            self.pose_ref_waypoints_idx = (resp.behind, resp.ahead)
        else:
            self.pose_ref_waypoints_idx = None

        last_pose = PoseStamped()
        last_pose.header = Header()
        last_pose.header.stamp = rospy.Time.now()
        last_pose.header.frame_id = "/world"
        
        last_pose.pose.position.x = self.last_pose.pose.position.x
        last_pose.pose.position.y = self.last_pose.pose.position.y
        last_pose.pose.position.z = self.last_pose.pose.position.z

        last_pose.pose.orientation.x = self.last_pose.pose.orientation.x
        last_pose.pose.orientation.y = self.last_pose.pose.orientation.y
        last_pose.pose.orientation.z = self.last_pose.pose.orientation.z
        last_pose.pose.orientation.w = self.last_pose.pose.orientation.w
                
        self.viz_current_pub.publish(last_pose)

    def publish_waypoints_around(self):
        """Visualizing reference waypoints by publishing visualization_msgs/Marker."""
        if self.pose_ref_waypoints_idx is None:
            return

        # visualizing +/- 5 waypoints around the reference waypoints.
        num = 5
        msg = Marker()
        msg.points = []
        msg.header = Header()
        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = "/world"
        msg.id = 1
        msg.type = Marker.CUBE_LIST
        msg.ns = "/viz_waypoints"
        msg.action = Marker.ADD # or MODIFY. Both are 0
        
        msg.scale.x = 0.1
        msg.scale.y = 0.1
        msg.scale.z = 0.1
                
        msg.color.r = 0.0
        msg.color.g = 1.0
        msg.color.b = 0.0
        msg.color.a = 0.5
        
        wp_types = ['behind', 'ahead']
        # waypoints behind
        for t in wp_types:
            if t == 'behind':
                r = range(num, -1, -1)
            else:
                r = range(num + 1)

            for i in r:
                if t == 'behind':
                    ref_idx = self.pose_ref_waypoints_idx[0] - i
                else:
                    ref_idx = self.pose_ref_waypoints_idx[1] + i

                ref_idx = ref_idx % len(self.all_ref_waypoints)
                wp = self.all_ref_waypoints[ref_idx]
                
                # marker pose, scale and color
                msg.points.append(Point(wp.pose.pose.position.x,
                                        wp.pose.pose.position.y,
                                        wp.pose.pose.position.z))
        self.viz_waypoints_around_pub.publish(msg)

    def publish_current_path(self):
        self.make_last_path()
        
        if self.last_path is None:
            return

        self.viz_current_path_pub.publish(self.last_path)

    def dist(self, pose, wp):
        a = pose.pose.position
        b = wp.pose.pose.position
        return math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2 + (a.z - b.z) ** 2)

    def waypoints_cb(self, waypoints):
        self.all_ref_waypoints = []
        waypoints = waypoints.waypoints
        for waypoint in waypoints:
            self.all_ref_waypoints.append(waypoint)
        print("Base waypoints received")

    def get_pose_stamped(self, position, orientation):
        msg = PoseStamped()
        msg.header = Header()
        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = "/world"

        msg.pose.position = Point(position.x, position.y, position.z)
        msg.pose.orientation = Quaternion(orientation.x, orientation.y, orientation.z, orientation.w)
        return msg

    def traffic_waypoint_cb(self, msg):
        self.pose_red_light_idx = msg.wp_index

if __name__ == '__main__':
    try:
        Viz()
    except rospy.ROSInterruptException:
        pass
